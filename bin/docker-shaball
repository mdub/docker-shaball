#! /usr/bin/env ruby

require "blobby"
require "clamp"
require "console_logger"
require "digest/sha1"
require "fileutils"

Clamp do

  self.description = "Bundle docker images into a tar-ball, with a unique name based on content"

  option "--pull", :flag, "pull the named images first"
  option "--force", :flag, "force re-generation of output file"
  option "--[no-]gzip", :flag, "compress using gzip(1)", :default => true

  option "--manifest", :flag, "just print the image manifest"

  parameter "IMAGE ...", "image name"

  def execute
    if pull?
      image_names.each do |name|
        system("docker pull #{name} > /dev/null")
        signal_error("docker pull failed") unless $?.success?
      end
    end
    if manifest?
      puts image_manifest
      return
    end
    manifest_checksum = Digest::SHA1.hexdigest(image_manifest)
    output_file_name = "#{manifest_checksum}.tar"
    output_file_name += ".gz" if gzip?
    stored_shaball = store[output_file_name]
    if force? || !stored_shaball.exists?
      logger.info("Generating #{output_file_name}")
      generate_shaball(image_names, stored_shaball)
    end
    puts output_file_name
  end

  private

  def logger
    @logger ||= ConsoleLogger.new($stderr)
  end

  def store
    Blobby::FilesystemStore.new(".")
  end

  def generate_shaball(image_names, target_blob)
    save_out, save_in = IO.pipe
    saver = spawn("docker save #{image_names.join(' ')}", :out => save_in)
    save_in.close
    data = save_out
    if gzip?
      gzip_out, gzip_in = IO.pipe
      spawn("gzip", :in => data, :out => gzip_in)
      gzip_in.close
      data = gzip_out
    end
    target_blob.write(data)
    data.close
  ensure
    Process.wait(saver)
    unless $?.success?
      target_blob.delete
      signal_error("docker save failed")
    end
  end

  def image_names
    image_list.map do |name|
      name += ":latest" unless name.index(":")
      name
    end.uniq.sort
  end

  def image_manifest
    inspect_output = `docker inspect -f '{{ .Config.Image }}' #{image_names.join(" ")}`
    signal_error("docker inspect returned error") unless $?.success?
    image_ids = inspect_output.lines.map(&:strip)
    image_names.zip(image_ids).map do |image_name_and_id|
      image_name_and_id.join(" ") + "\n"
    end.join
  end

end
